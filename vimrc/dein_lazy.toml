[[plugins]]
repo = 'wsdjeg/dein-ui.vim'
on_cmd    = ['DeinUpdate']
on_source = ['ctrlp.vim']
hook_add = '''"{{{
	nnoremap <F12> DeinUpdate<CR>
"}}}'''

[[plugins]]
repo = 'haya14busa/dein-command.vim'
on_cmd    = ['Dein']
hook_add = '''"{{{
"}}}'''

# filer{{{
[[plugins]]
#repo = 'scrooloose/nerdtree'
repo = 'preservim/nerdtree'
on_event = ['CursorHold']
hook_add = '''"{{{
    "curren directoryに合わせて NERDTreeToggle
    nnoremap <silent> <expr> <C-n> g:NERDTree.IsOpen() ? "\:NERDTreeClose<CR>" : bufexists(expand('%')) ? "\:NERDTreeFind<CR>" : "\:NERDTree<CR>"

    """bookmark初期表示
    let g:NERDTreeShowBookmarks=1

	"vim-nerdtree-syntax-highlight
    "lag対策
    let g:NERDTreeLimitedSyntax = 1
	let g:NERDTreeHighlightCursorline = 0

    let g:NERDTreeIgnore = ['.dat$','.exe$','.dbg$','.bak$','.dll$']

    ""NERDTree矢印変更{{{
    let g:NERDTreeDirArrowExpandable  = '▶'
    let g:NERDTreeDirArrowCollapsible = '▼'
    "}}}

	let g:WebDevIconsNerdTreeBeforeGlyphPadding = ""
	let g:WebDevIconsNerdTreeAfterGlyphPadding = ""

    " NERDTreeでルートを変更したらchdirする
    let g:NERDTreeChDirMode = 2

    let g:NERDTreeGitStatusIndicatorMapCustom = {
        \ "Modified"  : "✹ ",
        \ "Staged"    : "✚ ",
        \ "Untracked" : "✭ ",
        \ "Renamed"   : "➜ ",
        \ "Unmerged"  : "═",
        \ "Deleted"   : "✖ ",
        \ "Dirty"     : "✗ ",
        \ "Clean"     : "✔︎ ",
        \ "Unknown"   : "? "
        \ }


    augroup NERDTree_CLOSE
    	autocmd!
    	"NERDTree以外を閉じたらNERDTreeも閉じる
    	autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
    augroup END

"}}}'''
hook_post_source = '''"{{{
	" after a re-source, fix syntax matching issues (concealing brackets):
	if exists('g:loaded_webdevicons')
	  call webdevicons#refresh()
	endif
"}}}'''


[[plugins]]
repo = 'tiagofumo/vim-nerdtree-syntax-highlight'
on_source = ['nerdtree']
hook_add = '''"{{{
"}}}'''

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'
on_source = ['nerdtree']
hook_add = '''"{{{
"}}}'''
# }}}

[[plugins]]
repo = 'Yggdroot/indentLine'
on_event = ['CursorHold']
hook_add = '''"{{{
    set list listchars=tab:\¦\ "spaceが必要
	let g:indentLine_fileTypeExclude = ['help', 'nerdtree','denite','startify','taskpaper','unite','tagbar', 'dashboard']
"}}}'''

# ctags{{{
[[plugins]]
repo = 'soramugi/auto-ctags.vim'
on_event = ['CursorHold']
hook_add = '''"{{{
"}}}'''

[[plugins]]
repo = 'majutsushi/tagbar'
on_cmd = ['TagbarToggle']
hook_add = '''"{{{
    "let g:tagbar_ctags_bin = 'C:\ProgramData\chocolatey\bin\ctags.exe'
    "let g:tagbar_ctags_bin = '$HOME\scoop\shims\ctags.exe'
    "上記設定をコメントアウトしておかないと何故かうまく行かない
    "設定ファイルは
    "$HOME/ctags.d/config.ctags
    let g:tagbar_visibility_symbols = {
        \ 'public'    : '+',
        \ 'protected' : '#',
        \ 'private'   : '-'
        \ }

    nmap <F8> :TagbarToggle<CR>
    let g:tagbar_type_seq = {
    	\ 'ctagstype' : 'seq',
    	\ 'kinds' : [
    		\ 'm:method',
    		\ 's:svport'
    	\ ],
    	\ 'sort' : 0
    \ }
    " ctagsの設定ファイルと整合が取れていること
    let g:tagbar_type_toml = {
        \ 'ctagstype' : 'toml',
        \ 'kinds' : [
            \ 'p:plugin'
        \ ],
        \ 'sort' : 0
    \ }
"}}}'''
# }}}

[[plugins]]
repo = 'blueyed/vim-diminactive'
on_event = ['FocusLost', 'CursorHold','BufAdd']
hook_add = '''"{{{
"}}}'''

[[plugins]]
repo = 'tyru/current-func-info.vim'
on_event = ['CursorHold']
hook_add = '''"{{{
"}}}'''

[[plugins]]
repo = 'kshenoy/vim-signature'
on_event = ['CursorHold']
hook_add = '''"{{{
"}}}'''

[[plugins]]
repo = 'mhinz/vim-signify'
#on_event = ['CursorHold']
on_event = ['BufReadPost']
hook_add = '''"{{{
"}}}'''

[[plugins]]
repo = 'yssl/QFEnter'
on_event = ['CursorHold']
hook_add = '''"{{{
    let g:qfenter_keymap = {}
    let g:qfenter_keymap.open = ['<CR>', '<2-LeftMouse>']
    let g:qfenter_keymap.vopen = ['<Leader><CR>']
    let g:qfenter_keymap.hopen = ['<Leader><Space>']
    let g:qfenter_keymap.topen = ['<Leader><Tab>']
    "let g:qfenter_keymap = {}
    "let g:qfenter_keymap.vopen = ['<C-v>']
    "let g:qfenter_keymap.hopen = ['<C-CR>', '<C-s>', '<C-x>']
    "let g:qfenter_keymap.topen = ['<C-t>']
"}}}'''

[[plugins]]
repo = 'thinca/vim-qfreplace'
on_cmd = ['Qfreplace']
hook_add = '''"{{{
"}}}'''

[[plugins]]
repo = 'kraxli/vim-renamer'
on_cmd = ['Renamer']
hook_add = '''"{{{
"}}}'''

[[plugins]]
repo = 'skywind3000/asyncrun.vim'
on_event = ['FocusLost', 'CursorHold']
hook_add = '''"{{{
    let g:asyncrun_encs='cp932'
    "let g:asyncrun_program = get(g:, 'asyncrun_program', {})
    "let g:asyncrun_program.nice = { opts -> 'nice -5' . opts.cmd }
    augroup MyGroup
        autocmd!
        "autocmd User AsyncRunStart call asyncrun#quickfix_toggle(8, 1)
        autocmd BufNewFile,BufRead *.py noremap <buffer> <Space>r :AsyncRun python  -u %<CR>
        autocmd BufNewFile,BufRead *.seq,*.s noremap <buffer> <Space>r :AsyncRun -silent -strip SeqCnv_V340 -l 00_Main<CR>
        autocmd BufWritePost *.seq,*.s AsyncRun -silent -strip SeqCnv_V340 -l 00_Main
    augroup END
"}}}'''

[[plugins]]
repo = 'mh21/errormarker.vim'
on_event = ['FocusLost', 'CursorHold']
on_source = ['skywind3000/asyncrun.vim']
hook_add = '''"{{{
	nnoremap <silent> <ESC><ESC> :<C-u>nohlsearch<CR>:RemoveErrorMarkers<CR>
    let g:asyncrun_auto = "make"
    let g:errormarker_errortext="❌"
    let g:errormarker_warningtext="⚠️"
"}}}'''

[[plugins]]
repo = 'tpope/vim-fugitive'
on_event = ['CursorHold']
#on_source = ['lightline.vim']
hook_add = '''"{{{
    nnoremap [fugitive]  <Nop>
    nmap <space>g [fugitive]
    nnoremap <silent> [fugitive]s :Git status<CR>
    nnoremap <silent> [fugitive]a :Git add .<CR>
    nnoremap <silent> [fugitive]c :Git commit<CR>
    nnoremap <silent> [fugitive]p :Git push origin master<CR>
    nnoremap <silent> [fugitive]b :Git blame<CR>
    nnoremap <silent> [fugitive]d :Git diff<CR>
    nnoremap <silent> [fugitive]m :Git merge<CR>
"}}}'''

# # tester watchdogs{{{
# [[plugins]]
# repo = 'osyo-manga/vim-watchdogs'
# on_event = ['FocusLost', 'CursorHold']
# depends = [
#   'vim-hier',
#   'quickfixstatus',
#   'shabadou.vim',
#   'vim-quickrun',
# ]
# hook_add = '''"{{{
# 	let g:watchdogs_check_BufWritePost_enables = {
# 	\   "seq" : 1
# 	\}
# 	nnoremap <Space>r :QuickRun<CR>
#
# 	nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "<C-c>"
#
# 	let g:quickrun_config = {
# 	\   "_" : {
# 	\   "outputter/buffer/split" : ":rightbelow 8",
# 	\   "hook/output_encode/enable" : 1,
# 	\   "hook/output_encode/encoding" : "sjis",
# 	\ 	'runner'    : 'vimproc',
# 	\ 	'runner/vimproc/updatetime' : 40,
# 	\   "outputter/buffer/close_on_empty" : 1
# 	\	 },
# 	\   "seq/watchdogs_checker" : {
# 	\ 	"hook/close_quickfix/enable_exit" : 1,
# 	\ 	'hook/back_window/enable_exit':           0,
# 	\ 	'hook/back_window/priority_exit':         1,
# 	\   'hook/qfsigns_update/enable_exit':   1,
# 	\   'hook/qfsigns_update/priority_exit': 3,
# 	\ 	"hook/qfstatusline_update/enable_exit" : 1,
# 	\ 	"hook/qfstatusline_update/priority_exit" : 4,
# 	\ 	"hook/echo/enable" : 1,
# 	\ 	"hook/echo/output_success": "> Success.",
# 	\ 	"hook/echo/output_failure": "> Errors Found.",
# 	\ 	'outputter' : 'error',
# 	\ 	'outputter/quickfix/open_cmd' : "",
# 	\ 	'outputter/error/success' : 'quickfix',
# 	\ 	'outputter/error/error'   : 'quickfix',
# 	\   "type" : "watchdogs_checker/SeqCnv_V340",
# 	\	"command" : "SeqCnv_V340",
# 	\	"cmdopt" : "-l",
# 	\ 	"exec":"%c 00_Main %o",
# 	\	"quickfix/errorformat": "%WWarning: %f (%l):%m,%EError: %f (%l):%m",
# 	\   },
# 	\}
#
# 	augroup my_watchdogs
# 	  autocmd!
# 	  autocmd InsertLeave,BufWritePost,TextChanged *.seq,*.s WatchdogsRun
# 	  autocmd BufRead,BufNewFile *.seq,*.s WatchdogsRun
# 	augroup END
# "}}}'''
# hook_post_source = '''"{{{
#   call watchdogs#setup(g:quickrun_config)
# "}}}'''
#
# [[plugins]]
# repo = 'thinca/vim-quickrun'
# on_event = ['CursorHold']
# hook_add = '''"{{{
# "}}}'''
#
# [[plugins]]
# repo = 'osyo-manga/shabadou.vim'
# on_event = ['CursorHold']
# hook_add = '''"{{{
# "}}}'''
#
# [[plugins]]
# repo = 'cohama/vim-hier'
# on_event = ['CursorHold']
# hook_add = '''"{{{
# "}}}'''
#
# [[plugins]]
# repo = 'dannyob/quickfixstatus'
# on_event = ['CursorHold']
# hook_add = '''"{{{
# "}}}'''
# # }}}

# search {{{
[[plugins]]
repo = 'haya14busa/incsearch-fuzzy.vim'
on_map = ['<Plug>(incsearch-fuzzy-/)']
hook_add = '''"{{{
    map z/ <Plug>(incsearch-fuzzy-/)
    map z? <Plug>(incsearch-fuzzy-?)
    map zg/ <Plug>(incsearch-fuzzy-stay)
"}}}'''

[[plugins]]
repo = 'haya14busa/incsearch.vim'
on_map = ['<Plug>(incsearch-forward)']
on_sources = ['incsearch-fuzzy.vim']
hook_add = '''"{{{
    map /  <Plug>(incsearch-forward)
    map ?  <Plug>(incsearch-backward)
    map g/ <Plug>(incsearch-stay)
"}}}'''

[[plugins]]
repo = 'markonm/traces.vim'
on_event = ['CursorHold']
hook_add = '''"{{{
"}}}'''


[[plugins]]
repo = 'machakann/vim-highlightedyank'
on_event = ['CursorHold']
hook_add = '''"{{{
"}}}'''

[[plugins]]
repo = 'itchyny/vim-cursorword'
on_event = ['CursorHold']
hook_add = '''"{{{
"}}}'''
# }}}

[[plugins]]
repo = 'easymotion/vim-easymotion'
on_map = ['<Plug>(easymotion-overwin-f2)']
hook_add = '''"{{{
    nmap zz <Plug>(easymotion-overwin-f2)
    vmap zz <Plug>(easymotion-bd-f2)
     """ The prefix key.
     " nnoremap    [easymotion]   <Nop>
     " nmap    <M-f> [easymotion]
     "
     " " <Leader>f{char} to move to {char}
     " map  [easymotion]f <Plug>(easymotion-bd-f)
     " nmap [easymotion]f <Plug>(easymotion-overwin-f)
     "
     " " s{char}{char} to move to {char}{char}
     " nmap [easymotion]s <Plug>(easymotion-overwin-f2)
     " vmap [easymotion]s <Plug>(easymotion-bd-f2)
     "
     " " Move to line
     " map  [easymotion]j <Plug>(easymotion-bd-jk)
     " nmap [easymotion]j <Plug>(easymotion-overwin-line)
     "
     " " Move to word
     " map  [easymotion]w <Plug>(easymotion-bd-w)
     " nmap [easymotion]w <Plug>(easymotion-overwin-w)
     "
     " let g:EasyMotion_do_mapping = 0
"}}}'''

[[plugins]]
repo = 'rhysd/accelerated-jK'
on_map = [
	'<Plug>(accelerated_jk_gj)',
	'<Plug>(accelerated_jk_gk)'
		]
hook_add = '''"{{{
    nmap j <Plug>(accelerated_jk_gj)
    nmap k <Plug>(accelerated_jk_gk)
"}}}'''

[[plugins]]
repo = 'rhysd/clever-f.vim'
on_event = ['CursorHold']
hook_add = '''"{{{
    let g:clever_f_mark_direct = 1
"}}}'''

[[plugins]]
repo = 'unblevable/quick-scope'
on_source = ['ctrlp.vim']
on_event = ['CursorHold']
hook_add = '''"{{{
    nmap <space>qs <plug>(QuickScopeToggle)
    xmap <space>qs <plug>(QuickScopeToggle)
    let g:qs_max_chars = 100
    let g:qs_lazy_highlight = 0
    let g:qs_delay = 100
    augroup vimrc_quick_scope
      autocmd!
      autocmd FileType startuptime,nvimtree,nerdtree,buffergator,tagbar,qf,ControlP let b:qs_local_disable=1
    augroup END
"}}}'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_cmd = ['EasyAlign']
hook_add = '''"{{{
    "" Start interactive EasyAlign in visual mode (e.g. vipga)
    xmap ea <Plug>(EasyAlign)
    " Start interactive EasyAlign for a motion/text object (e.g. gaip)
    nmap ea <Plug>(EasyAlign)

    let g:easy_align_delimiters = {
    \ '.': { 'pattern': '\.\{2,}' },
    \ '"': { 'pattern': '"', 'filter': 'v/^\s*"/', 'ignore_groups': ['String']},
    \ '%': { 'pattern': '%', 'filter': 'v/^\s*"/', 'ignore_groups': ['String']},
    \ "'": { 'pattern': "'", 'filter': "v/^\s*'/", 'ignore_groups': ['String']},
    \ "-": { 'pattern': '-\{2,}'},
    \ }
"}}}'''

[[plugins]]
repo = 'simeji/winresizer'
on_cmd = ['WinResizerStartResize']
hook_add = '''"{{{
    let g:winresizer_start_key = '<M-w>'
"}}}'''

#[[plugins]]
#repo = 'lambdalisue/gina.vim'
#on_event = ['CursorHold']
#hook_add = '''"{{{
#"}}}'''


[[plugins]]
repo = 'dstein64/vim-startuptime'
on_cmd = ['StartupTime']
hook_add = '''"{{{
"}}}'''

[[plugins]]
repo = 'farmergreg/vim-lastplace'
on_i = 1
hook_add = '''"{{{
"}}}'''

# completion snippet{{{
[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_i = 1
hook_add = '''"{{{
"}}}'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'
on_i = 1
hook_add = '''"{{{
"}}}'''

[[plugins]]
repo = 'jiangmiao/auto-pairs'
on_i = 1
hook_add = '''"{{{
    let g:auto_ctags_set_tags_option = 1
    let g:auto_ctags_warn_once = 1
"}}}'''

[[plugins]]
repo = 'tpope/vim-surround'
on_i = 1
hook_add = '''"{{{
"}}}'''
# }}}

# fuzzyfinder{{{
# [[plugins]]
# repo = 'liuchengxu/vim-clap'										 ", { 'on': [] }
# [[plugins]]
# repo = 'tamago324/vim-clap-help' 								 ", { 'on': [] }
# [[plugins]]
# repo = 'hokorobi/vim-clap-sessions'							 ", { 'on': [] }


[[plugins]]
repo = 'mattn/ctrlp-mark'
on_cmd=['CtrlPMark']
hook_add = '''"{{{
"}}}'''

[[plugins]]
repo = 'hara/ctrlp-colorscheme'
on_cmd = ['CtrlPColorscheme']
hook_add = '''"{{{
"}}}'''

# }}}

[[plugins]]
repo = 'tyru/restart.vim'
on_cmd    = ['Restart']
hook_add = '''"{{{
    " 終了時に保存するセッションオプションを設定する{{{
    let g:restart_sessionoptions
        \ = 'blank,buffers,curdir,folds,help,localoptions,tabpages'
    "}}}
    " :Restart 時に変数の定義を行う
    command! MyRestart Restart --cmd "let g:restarted = 1"

    " この変数を使用して :Restart が行われたかどうかの判定を行う
    if !exists("g:restarted")
        let $PATH = $PATH . ";C:/cpp/boost"
    endif

    nnoremap <silent> <ESC><ESC><ESC><ESC> :<C-u>Restart<CR>
"}}}'''

# specific filetype{{{
[[plugins]]
repo = 'RobRoseKnows/lark-vim'
on_ft = ['lark']
hook_add = '''"{{{
"}}}'''

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']
hook_add = '''"{{{
"}}}'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'
on_ft = ['toml','lua']
hook_add = '''"{{{
"}}}'''

[[plugins]]
repo = 'osyo-manga/vim-precious'
on_ft = ['toml','lua']
hook_add = '''"{{{
let g:precious_enable_switchers = {
	\	"*" : {
	\		"setfiletype" : 0
	\	},
	\	"vim" : {
	\		"setfiletype" : 1
	\	},
	\	"lua" : {
	\		"setfiletype" : 1
	\	},
	\	"toml" : {
	\		"setfiletype" : 1
	\	},
	\}
"}}}'''


[[plugins]]
repo = 'mechatroner/rainbow_csv'
on_ft = ['csv']
hook_add = '''"{{{
"}}}'''

# [[plugins]]
# repo = '~/seq.vim'
# on_ft = ['seq']
# hook_add = '''"{{{
# "}}}'''
# }}}
