###########
# dein
###########
[[plugins]]
repo = 'wsdjeg/dein-ui.vim'
on_cmd    = ['DeinUpdate']
hook_add = '''"{{{
    "nnoremap <F12> :DeinUpdate<CR>
    " nnoremap <F12> :call dein#check_update(v:true)<CR>
    nnoremap <F12> :Dein update<CR>
"}}}'''

[[plugins]]
repo = 'haya14busa/dein-command.vim'
on_cmd    = ['Dein']

###########
# colorschemes
###########
[[plugins]]
repo = 'rafi/awesome-vim-colorschemes'
on_event = ['ColorSchemePre']

###########
# filer
###########
[[plugins]]
repo = 'preservim/nerdtree'
on_event = ['BufRead']
# depends  = [# {{{
#   'tiagofumo/vim-nerdtree-syntax-highlight',
#   'Xuyuanp/nerdtree-git-plugin'
#     ]# }}}
hook_add = '''"{{{
    "curren directoryに合わせて NERDTreeToggle
    nnoremap <silent> <expr> <C-n> g:NERDTree.IsOpen() ? "\:NERDTreeClose<CR>" : bufexists(expand('%')) ? "\:NERDTreeFind<CR>" : "\:NERDTree<CR>"

    """bookmark初期表示
    let g:NERDTreeShowBookmarks=1

    "vim-nerdtree-syntax-highlight
    "lag対策
    let g:NERDTreeLimitedSyntax = 1
    let g:NERDTreeHighlightCursorline = 0

    let g:NERDTreeIgnore = ['.dat$','.exe$','.dbg$','.bak$','.dll$']

    ""NERDTree矢印変更{{{
    let g:NERDTreeDirArrowCollapsible = ''
    let g:NERDTreeDirArrowExpandable = ''
    "}}}
    let g:NERDTreeMinimalUI = 1
    let g:NERDTreeDirArrows = 1

    let g:WebDevIconsNerdTreeBeforeGlyphPadding = ""
    let g:WebDevIconsNerdTreeAfterGlyphPadding = ""

    " NERDTreeでルートを変更したらchdirする
    let g:NERDTreeChDirMode = 2

    let g:NERDTreeGitStatusIndicatorMapCustom = {
        \ "Modified"  : "✹ ",
        \ "Staged"    : "✚ ",
        \ "Untracked" : "✭ ",
        \ "Renamed"   : "➜ ",
        \ "Unmerged"  : "═",
        \ "Deleted"   : "✖ ",
        \ "Dirty"     : "✗ ",
        \ "Clean"     : "✔︎ ",
        \ "Unknown"   : "? "
        \ }


    augroup NERDTree_CLOSE
        autocmd!
        "NERDTree以外を閉じたらNERDTreeも閉じる
        autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
        autocmd FileType nerdtree setlocal signcolumn=no
    augroup END

"}}}'''
hook_post_source = '''"{{{
    " after a re-source, fix syntax matching issues (concealing brackets):
    if exists('g:loaded_webdevicons')
      call webdevicons#refresh()
    endif
"}}}'''

[[plugins]]
repo = 'tiagofumo/vim-nerdtree-syntax-highlight'
on_source = ['nerdtree']

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'
on_source = ['nerdtree']

###########
# ctags
###########
[[plugins]]
repo = 'soramugi/auto-ctags.vim'
on_event = ['BufEnter']

[[plugins]]
repo = 'majutsushi/tagbar'
on_cmd = ['TagbarToggle']
hook_add = '''"{{{
    "let g:tagbar_ctags_bin = 'C:\ProgramData\chocolatey\bin\ctags.exe'
    "let g:tagbar_ctags_bin = '$HOME\scoop\shims\ctags.exe'
    "上記設定をコメントアウトしておかないと何故かうまく行かない
    "設定ファイルは
    "$HOME/ctags.d/config.ctags
    let g:tagbar_visibility_symbols = {
        \ 'public'    : '+',
        \ 'protected' : '#',
        \ 'private'   : '-'
        \ }

    nmap <F8> :TagbarToggle<CR>
    let g:tagbar_type_seq = {
        \ 'ctagstype' : 'seq',
        \ 'kinds' : [
            \ 'm:method',
            \ 's:svport'
        \ ],
        \ 'sort' : 0
    \ }
    " ctagsの設定ファイルと整合が取れていること
    let g:tagbar_type_toml = {
        \ 'ctagstype' : 'toml',
        \ 'kinds' : [
            \ 'p:plugin'
        \ ],
        \ 'sort' : 0
    \ }
"}}}'''

###########
# interface
###########
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
on_event = ['BufEnter']
hook_add = '''"{{{
    let g:indent_guides_enable_on_vim_startup = 1
    let g:indent_guides_start_level = 1
    let g:indent_guides_guide_size = 1
    let g:indent_guides_exclude_filetypes = ['help', 'nerdtree']
"}}}'''

# [[plugins]]
# repo = 'Yggdroot/indentLine'
# on_event = ['BufEnter']
# hook_add = '''"{{{
#     set list listchars=tab:\¦\ "spaceが必要
#     let g:indentLine_fileTypeExclude = ['help', 'nerdtree','denite','startify','taskpaper','unite','tagbar', 'dashboard']
#     let g:indentLine_conceallevel = 0
#     let g:indentLine_char  =  '|'
# "}}}'''

# [[plugins]]
# repo = 'blueyed/vim-diminactive'
# on_event = ['FocusLost']
# hook_add = '''"{{{
# let g:diminactive_use_syntax = 1
# "}}}'''

[[plugins]]
repo = 'kshenoy/vim-signature'
on_event = ['BuhEnter']

[[plugins]]
repo = 'mhinz/vim-signify'
on_event = ['BufReadPost']

[[plugins]]
# カーソルジャンプ時の描画
repo = 'DanilaMihailov/beacon.nvim'
on_event = ['BufEnter']
if   = ''' has('gui_running')'''

[[plugins]]
repo = 'machakann/vim-highlightedyank'
on_event = ['BufEnter']

[[plugins]]
repo = 'itchyny/vim-cursorword'
on_event = ['BufEnter']

###########
# quickfix
###########
[[plugins]]
# 直前のウィンドウで開く
repo = 'yssl/QFEnter'
on_event = ['BufEnter']
hook_add = '''"{{{
    let g:qfenter_keymap = {}
    let g:qfenter_keymap.open = ['<CR>', '<2-LeftMouse>']
    let g:qfenter_keymap.vopen = ['<Leader><CR>']
    let g:qfenter_keymap.hopen = ['<Leader><Space>']
    let g:qfenter_keymap.topen = ['<Leader><Tab>']
    "let g:qfenter_keymap = {}
    "let g:qfenter_keymap.vopen = ['<C-v>']
    "let g:qfenter_keymap.hopen = ['<C-CR>', '<C-s>', '<C-x>']
    "let g:qfenter_keymap.topen = ['<C-t>']
"}}}'''

[[plugins]]
# 一括リネーム
repo = 'thinca/vim-qfreplace'
on_cmd = ['Qfreplace']

###########
# tool
###########
[[plugins]]
repo = 'tpope/vim-commentary'
on_event = ['BufRead']


[[plugins]]
repo = 'junegunn/vim-easy-align'
on_cmd = ['EasyAlign']
hook_add = '''"{{{
    "" Start interactive EasyAlign in visual mode (e.g. vipga)
    xmap ea <Plug>(EasyAlign)
    " Start interactive EasyAlign for a motion/text object (e.g. gaip)
    nmap ea <Plug>(EasyAlign)

    let g:easy_align_delimiters = {
    \ '.': { 'pattern': '\.\{2,}' },
    \ '"': { 'pattern': '"', 'filter': 'v/^\s*"/', 'ignore_groups': ['String']},
    \ '%': { 'pattern': '%', 'filter': 'v/^\s*"/', 'ignore_groups': ['String']},
    \ "'": { 'pattern': "'", 'filter': "v/^\s*'/", 'ignore_groups': ['String']},
    \ "-": { 'pattern': '-\{2,}'},
    \ }
"}}}'''

[[plugins]]
repo = 'simeji/winresizer'
on_cmd = ['WinResizerStartResize']
hook_add = '''"{{{
    let g:winresizer_start_key = '<M-w>'
"}}}'''

[[plugins]]
repo = 'kraxli/vim-renamer'
on_cmd = ['Renamer']

[[plugins]]
repo = 'dstein64/vim-startuptime'
on_cmd = ['StartupTime']
hook_add = '''"{{{
    nnoremap <F2> :StartupTime<CR>
"}}}'''

[[plugins]]
repo = 'vim-jp/vimdoc-ja'
on_event = ['BufEnter']

[[plugins]]
repo = 'tyru/restart.vim'
on_cmd    = ['Restart']
hook_add = '''"{{{
    " 終了時に保存するセッションオプションを設定する{{{
    let g:restart_sessionoptions
        \ = 'winsize,winpos,blank,buffers,curdir,folds,help,localoptions,tabpages'
    "}}}
    " :Restart 時に変数の定義を行う
    command! MyRestart Restart --cmd "let g:restarted = 1"

    " この変数を使用して :Restart が行われたかどうかの判定を行う
    if !exists("g:restarted")
        let $PATH = $PATH . ";C:/cpp/boost"
    endif

    nnoremap <silent> <ESC><ESC><ESC><ESC> :<C-u>Restart<CR>
"}}}'''

###########
# runner
###########
[[plugins]]
repo = 'skywind3000/asyncrun.vim'
on_cmd    = ['AsyncRun']
hook_add = '''"{{{
    let g:asyncrun_encs='cp932'
    "let g:asyncrun_program = get(g:, 'asyncrun_program', {})
    "let g:asyncrun_program.nice = { opts -> 'nice -5' . opts.cmd }
    augroup MyGroup
        autocmd!
        autocmd User AsyncRunStart call asyncrun#quickfix_toggle(8, 1)
        autocmd BufNewFile,BufRead *.py noremap <buffer> <Space>r :AsyncRun python  -u %<CR>
        autocmd BufNewFile,BufRead *.seq,*.s noremap <buffer> <Space>r :AsyncRun -silent -strip SeqCnv_V340 -l 00_Main<CR>
        autocmd BufWritePost *.seq,*.s AsyncRun -silent -strip SeqCnv_V340 -l 00_Main
    augroup END
"}}}'''

[[plugins]]
repo = 'mh21/errormarker.vim'
on_source = ['asyncrun.vim']
hook_add = '''"{{{
    nnoremap <silent> <ESC><ESC> :<C-u>nohlsearch<CR>:RemoveErrorMarkers<CR>
    let g:asyncrun_auto = "make"
    let g:errormarker_errortext="❌"
    let g:errormarker_warningtext="⚠️"
"}}}'''

###########
# search
###########
[[plugins]]
repo = 'haya14busa/incsearch-fuzzy.vim'
on_map = ['<Plug>']
hook_add = '''"{{{
    map z/ <Plug>(incsearch-fuzzy-/)
    map z? <Plug>(incsearch-fuzzy-?)
    map zg/ <Plug>(incsearch-fuzzy-stay)
"}}}'''

[[plugins]]
repo = 'haya14busa/incsearch.vim'
on_map = ['<Plug>']
on_sources = ['incsearch-fuzzy.vim']
hook_add = '''"{{{
    map /  <Plug>(incsearch-forward)
    map ?  <Plug>(incsearch-backward)
    map g/ <Plug>(incsearch-stay)
"}}}'''

[[plugins]]
repo = 'markonm/traces.vim'
on_event = ['BufEnter']

###########
# motion
###########
[[plugins]]
repo = 'easymotion/vim-easymotion'
on_map = ['<Plug>']
hook_add = '''"{{{

     "" <Leader>f{char} to move to {char}
     "map  zf <Plug>(easymotion-bd-f)
     "nmap zf <Plug>(easymotion-overwin-f)

     "" s{char}{char} to move to {char}{char}
     "nmap zs <Plug>(easymotion-overwin-f2)
     "vmap zs <Plug>(easymotion-bd-f2)

     " Move to line
     map  zj <Plug>(easymotion-bd-jk)
     nmap zj <Plug>(easymotion-overwin-line)

     " Move to word
     map  zz <Plug>(easymotion-bd-w)
     nmap zz <Plug>(easymotion-overwin-w)

     let g:EasyMotion_do_mapping = 0
"}}}'''

[[plugins]]
repo = 'rhysd/accelerated-jK'
on_map = [ # {{{
    '<Plug>(accelerated_jk_gj)',
    '<Plug>(accelerated_jk_gk)'
        ]# }}}
hook_add = '''"{{{
    nmap j <Plug>(accelerated_jk_gj)
    nmap k <Plug>(accelerated_jk_gk)
"}}}'''

[[plugins]]
# f連打
repo = 'rhysd/clever-f.vim'
on_event = ['BufEnter']
hook_add = '''"{{{
    let g:clever_f_mark_direct = 1
"}}}'''

[[plugins]]
# 固有文字ハイライト
repo = 'unblevable/quick-scope'
on_source = ['ctrlp.vim']
on_event = ['BufEnter']
hook_add = '''"{{{
    nmap <space>qs <plug>(QuickScopeToggle)
    xmap <space>qs <plug>(QuickScopeToggle)
    let g:qs_max_chars = 100
    let g:qs_lazy_highlight = 0
    let g:qs_delay = 100
    augroup vimrc_quick_scope
      autocmd!
      autocmd FileType startuptime,nvimtree,nerdtree,buffergator,tagbar,qf,ControlP let b:qs_local_disable=1
    augroup END
"}}}'''

###########
# complete
###########
[[plugins]]
repo = 'jiangmiao/auto-pairs'
on_event = ['BufEnter']
hook_add = '''"{{{
    let g:auto_ctags_set_tags_option = 1
    let g:auto_ctags_warn_once = 1
"}}}'''

[[plugins]]
repo = 'tpope/vim-surround'
on_event = ['BufEnter']

[[plugins]]
repo = 'kana/vim-smartchr'
on_i = 1
hook_add = '''"{{{
" 演算子の間に空白を入れる
"inoremap <expr> < search('^#include\%#', 'bcn')? ' <': smartchr#one_of(' < ', ' << ', '<')
"inoremap <expr> > search('^#include <.*\%#', 'bcn')? '>': smartchr#one_of(' > ', ' >> ', '>')
inoremap <expr> + smartchr#one_of(' + ', '++', '+')
inoremap <expr> # smartchr#one_of('# ', '#')
inoremap <expr> - smartchr#one_of(' - ', '--', '-')
inoremap <expr> / smartchr#one_of(' / ', '// ', '/')
" *はポインタで使うので、空白はいれない
inoremap <expr> & smartchr#one_of(' & ', ' && ', '&')
inoremap <expr> % smartchr#one_of(' % ', '%')
inoremap <expr> <Bar> smartchr#one_of(' <Bar> ', ' <Bar><Bar> ', '<Bar>')
" inoremap <expr> , smartchr#one_of(', ', ',')
inoremap <expr> , smartchr#one_of(',', ';', '')
" 3項演算子の場合は、後ろのみ空白を入れる
inoremap <expr> ? smartchr#one_of('? ', '?')
inoremap <expr> : smartchr#one_of(': ', '::', ':')

" =の場合、単純な代入や比較演算子として入力する場合は前後にスペースをいれる。
" 複合演算代入としての入力の場合は、直前のスペースを削除して=を入力
inoremap <expr> = search('\(&\<bar><bar>\<bar>+\<bar>-\<bar>/\<bar>>\<bar><\) \%#', 'bcn')? '<bs>= '
                \ : search('\(*\<bar>!\)\%#', 'bcn') ? '= '
                \ : smartchr#one_of(' = ', ' == ', '=')

" 下記の文字は連続して現れることがまれなので、二回続けて入力したら改行する
"inoremap <expr> } smartchr#one_of('}', '}<cr>')
" inoremap <expr> ; smartchr#one_of(';', ';<cr>')
" cosco vimがよくわからないので代用
inoremap <expr> ; smartchr#one_of(';', ',', '')
" 「->」は入力しづらいので、..で置換え
inoremap <expr> . smartchr#loop('.', '->', '...')
" 行先頭での@入力で、プリプロセス命令文を入力
inoremap <expr> @ search('^\(#.\+\)\?\%#','bcn')? smartchr#one_of('#define', '#include', '#ifdef', '#endif', '@'): '@'

inoremap <expr> " search('^#include\%#', 'bcn')? ' "': '"'
" if文直後の(は自動で間に空白を入れる
"inoremap <expr> ( search('\<\if\%#', 'bcn')? ' (': '('
"}}}'''

###########
# fuzzyfinde
###########
[[plugins]]
repo = 'mattn/ctrlp-mark'
on_cmd=['CtrlPMark']
merged = false
overwrite = true
lazy = false

[[plugins]]
repo = 'hara/ctrlp-colorscheme'
on_cmd = ['CtrlPColorscheme']
merged = false
overwrite = true
lazy = false

###########
# specific filetype
###########
[[plugins]]
repo = 'lark-parser/vim-lark-syntax'
on_ft = ['lark']

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

[[plugins]]
repo = 'Shougo/context_filetype.vim'
on_ft = ['toml','lua']

[[plugins]]
repo = 'osyo-manga/vim-precious'
on_ft = ['toml','lua']
hook_add = '''"{{{
let g:precious_enable_switchers = {
    \   "*" : {
    \       "setfiletype" : 0
    \   },
    \   "vim" : {
    \       "setfiletype" : 1
    \   },
    \   "lua" : {
    \       "setfiletype" : 1
    \   },
    \   "toml" : {
    \       "setfiletype" : 1
    \   },
    \}
"}}}'''

[[plugins]]
repo = 'mechatroner/rainbow_csv'
on_ft = ['csv']

###########
# lsp
###########
[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'
on_ft = ['vim','python','lua']

[[plugins]]
repo = 'mattn/vim-lsp-settings'
on_event = ['BufEnter']
