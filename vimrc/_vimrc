"
" ██╗   ██╗██╗███╗   ███╗██████╗  ██████╗
" ██║   ██║██║████╗ ████║██╔══██╗██╔════╝
" ██║   ██║██║██╔████╔██║██████╔╝██║
" ╚██╗ ██╔╝██║██║╚██╔╝██║██╔══██╗██║
"  ╚████╔╝ ██║██║ ╚═╝ ██║██║  ██║╚██████╗
"   ╚═══╝  ╚═╝╚═╝     ╚═╝╚═╝  ╚═╝ ╚═════╝
" Last Change: 10-Jun-2020.
" Maintainer: TH

"TODO seq.vim シンタックスファイルの読み込み場所
"TODO _configファイル更新でも自動再読み込み
"TODO シンボリックリンクを簡単に貼れるbat作ること
"TODO Neovim環境でコピペがおかしい
"TODO LSP使用できない環境での設定を検討する
"TODO ctagsなどプラグイン以外の依存関係の整理
"NONE 任意のタイミングでのプラグインロード→vim-plugで遅延読み込みすると設定ファイルが無視される
"NOTE hier ayuでは反映されない

"最初に書く必要あり
set encoding=utf8
scriptencoding utf-8
if !has('kaoriya')
	let g:vimproc#download_windows_dll = 1
endif

set shortmess+=I                                 " 起動時のメッセージを消す
set shortmess-=S                                 " 検索件数表示

"reload時の設定検討中
"set all&
"autocmd!
"mapclear

"pythonインターフェース有効化
"anacondaで指定すると動作が超絶不安定
"pynvimのインストール方法謎
if !has('nvim')
"	set pythonthreedll=$HOME\scoop\apps\anaconda3\current\python37.dll
	set pythonthreedll=$HOME\vimfiles\python-3.8.3-embed-amd64\python38.dll
endif

"基本設定{{{
"ステータスライン常時表示
set laststatus=2
set cmdheight=2

"候補が一つでも表示、勝手にインサートされない
"set completeopt=menuone,noinsert
set completeopt=menuone
"ラグ対策
set lazyredraw
set updatetime=700

set autoindent
"set expandtab
set tabstop=4
set shiftwidth=4
"カーソルラインはvim-auto-cursorlineに統合
"set cursorline
"set cursorcolumn
set number
"カラムのカクカク防止
set signcolumn=yes
filetype plugin on

"コマンドラインモードでTABキーによるファイル名補完を有効にする
set wildmenu wildmode=full

"backup
let $DATE = strftime("%Y%m%d_%H%M%S")
set backup
set writebackup
set backupdir=$HOME/.vimbackup
set undodir=$HOME/.vimbackup
set undofile
set noswapfile

"自動的にセッション保存
set sessionoptions-=blank

"対になる括弧点滅
set showmatch
set matchtime=1

set scrolloff=10
set backspace=indent,eol,start
set matchpairs+=「:」,『:』,（:）,【:】,《:》,〈:〉,［:］,‘:’,“:”,｛:｝
set virtualedit=block
set ignorecase
set smartcase

"末尾の空白行削除{{{
function! s:remove_unnecessary_space()
    " delete last blank lines
    while getline('$') == ""
            $delete _
    endwhile
endfunction

augroup win_config
	autocmd!
	"Quickfixウィンドウ開く
	autocmd QuickFixCmdPost *grep* cwindow
	"qfウィンドウを常に最下部で開く
	autocmd FileType qf wincmd J
	"ウィンドウを常に等分割
	autocmd VimResized * :wincmd =
	"session保存時クイックフィックス閉じる
	autocmd VimLeave * cclose
	autocmd VimLeave * cclose
	autocmd VimLeave	* mks! ~/.vim/session/$DATE.vim
	"文末スペース / 連続改行削除
	autocmd BufWritePre * :%s/\s\+$//ge
	autocmd BufWritePre * :%s/\n\{4,}/\r\r\r/ge
	autocmd BufWritePre * call s:remove_unnecessary_space()

	"折りたたみ設定
	autocmd FileType vim setlocal foldmethod=marker
	"backupファイルに日付
	autocmd BufWritePre * let &bex = '.' .strftime("%Y%m%d_%H%M%S")
augroup END
"}}}

"grep代替{{{
if executable('pt')
	set grepprg=pt\ --nogroup\
	set grepformat=%f:%l:%c:%m
elseif executable('ag')
	set grepprg=ag\ --nogroup\ -iS
    set grepformat=%f:%l:%m
elseif executable('rg')
    set grepprg=rg\ --vimgrep\ --no-heading
    set grepformat=%f:%l:%c:%m,%f:%l:%m
endif
"}}}

"IME状態に応じたカーソル色設定{{{
if has('multi_byte_ime')
  highlight Cursor guifg=#000d18 guibg=#8faf9f gui=bold
  highlight CursorIM guifg=NONE guibg=#ecbcbc
endif
"}}}

" 終了時に保存するセッションオプションを設定する{{{
let g:restart_sessionoptions
    \ = 'blank,buffers,curdir,folds,help,localoptions,tabpages'
"}}}

""vimrcの編集再読み込み{{{
	let $MYSEQRC = expand('$HOME\vimfiles\userautoload\SysSeq.vim')
	let $MYPLUGRC =expand('$VIMRUNTIME\userautoload\Plugins.vim')
	let $MYCONFIG =expand('$VIMRUNTIME\_config\*.vim')
	let $MYGCONFIG =expand('$VIMRUNTIME\_gconfig\*.vim')
if has('nvim')
	let $MYVIMRC =expand('$HOME\AppData\Local\nvim\init.vim')
	let $MYGVIMRC =expand('$HOME\AppData\Local\nvim\ginit.vim')
endif

"編集
command! Evimrc :e $MYVIMRC
command! Egvimrc :e $MYGVIMRC
command! Eplug :e $MYPLUGRC
command! Etoml :e $HOME\.vim\rc\dein.toml
command! Eltoml :e $HOME\.vim\rc\dein_lazy.toml
command! Esysseq :e $MYSEQRC

"保存したら再読み込み
"gui_runningがnvimでは機能しないらしい
augroup myvimrc
    au!
    au BufWritePost $MYVIMRC,$MYGVIMMRC,.vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc,ginit.vim,init.vim,_config/*.vim,_gconfig/*.vim nested so $MYVIMRC | if has('gui_running') || has('nvim') | so $MYGVIMRC | endif
	au BufWritePost $MYSEQRC nested so $MYSEQRC
augroup END

"ペーストする際に、自動でpaste modeに
if !has('nvim')
	if &term =~ "xterm"
	    let &t_ti .= "\e[?2004h"
	    let &t_te .= "\e[?2004l"
	    let &pastetoggle = "\e[201~"

	    function XTermPasteBegin(ret)
	        set paste
	        return a:ret
	    endfunction

	    noremap <special> <expr> <Esc>[200~ XTermPasteBegin("0i")
	    inoremap <special> <expr> <Esc>[200~ XTermPasteBegin("")
	    cnoremap <special> <Esc>[200~ <nop>
	    cnoremap <special> <Esc>[201~ <nop>
	endif
endif

"yank した文字列をクリップボードにコピー
"set clipboard=unnamed
"}}}

"ctags{{{ auto-ctagsと重複？
set fileformats=unix,dos,mac
set fileencodings=utf-8,sjis

"set tags=./tags;,tags;$HOME
set tags=./tags;
"set tags=./tags

function! s:execute_ctags() abort
  " 探すタグファイル名
  let tag_name = '.tags'
  " ディレクトリを遡り、タグファイルを探し、パス取得
  let tags_path = findfile(tag_name, '.;')
  " タグファイルパスが見つからなかった場合
  if tags_path ==# ''
    return
  endif

  " タグファイルのディレクトリパスを取得
  " `:p:h`の部分は、:h filename-modifiersで確認
  let tags_dirpath = fnamemodify(tags_path, ':p:h')
  " 見つかったタグファイルのディレクトリに移動して、ctagsをバックグラウンド実行（エラー出力破棄）
  execute 'silent !cd' tags_dirpath '&& ctags -R -f' tag_name '2> /dev/null &'
endfunction

augroup ctags
  autocmd!
  autocmd BufWritePost * call s:execute_ctags()
augroup END
"}}}
"}}}

" プラグインインストール{{{
silent! call plug#begin('~/vimfiles/plugged')
Plug 'rafi/awesome-vim-colorschemes'		"colorscheme
Plug 'mhinz/vim-startify'					" 124 startify
Plug 'osyo-manga/vim-watchdogs'				" 119 seqのエラーチェック
	Plug 'KazuakiM/vim-qfsigns'
	Plug 'KazuakiM/vim-qfstatusline'
	Plug 'osyo-manga/shabadou.vim'
Plug 'LeafCage/foldCC'						" フォールドの見た目変更
Plug 'Yggdroot/indentLine'					" 106 vim-indent-guidesよりこちらが好みindent可視化
Plug 'cohama/vim-hier'						" エラー行ハイライト
Plug 'dannyob/quickfixstatus'				" カーソルをエラー行に配置したときメッセージ表示
Plug 'osyo-manga/vim-brightest'				" 131 カーソル下の単語にアンダーライン
Plug 'easymotion/vim-easymotion'			" 132
Plug 'itchyny/lightline.vim'				" 107 lightline
	Plug 'delphinus/lightline-delphinus'
Plug 'rhysd/clever-f.vim'					" fキー強化
Plug 'haya14busa/incsearch-fuzzy.vim'		" 103 一文字ごとにハイライト
	Plug 'haya14busa/incsearch.vim'			" 104 一文字ごとにハイライト
Plug 'junegunn/vim-easy-align'				" 114 テキスト整形
Plug 'kana/vim-smartchr'					" 118 符号の前後にスペース
Plug 'kshenoy/vim-signature'				" マーク位置表示
Plug 'machakann/vim-highlightedyank'		" yank文字列ハイライト
Plug 'mhinz/vim-signify'					" 差分をsignで表示
Plug 'qpkorr/vim-renamer'					" ファイル名一括編集
Plug 'rhysd/accelerated-jK'					" 100 カーソル移動速度変更
Plug 'ryanoasis/vim-devicons'				" icon追加
Plug 'scrooloose/nerdtree'					" 108 nerdtree
	Plug 'tiagofumo/vim-nerdtree-syntax-highlight' " nerdtree用シンタックス
	Plug 'Xuyuanp/nerdtree-git-plugin' 		" git ステータス表示
Plug 'simeji/winresizer'					" 120 ウィンドウリサイズ
Plug 'majutsushi/tagbar'					" 110 tag一覧表示 vistaに乗り換え検討 Seqのタグが反映されない
Plug 'thinca/vim-qfreplace'					" 一括置換
Plug 'thinca/vim-quickrun'					" 116 すぐ実行
Plug 'thinca/vim-singleton'					" 117 起動数を常に1つに
Plug 'tmhys/vim-auto-cursorline'			" カーソル放置で点滅
Plug 'tpope/vim-fugitive'					" 115 git用
Plug 'tpope/vim-surround'					" 閉じカッコを編集
Plug 'mopp/autodirmake.vim' 				" dir自動作成
Plug 'tyru/current-func-info.vim'			" カーソル位置関数表示
Plug 'tyru/restart.vim'						" 109 esc連打で再起動
Plug 'vim-scripts/errormarker.vim'			" コンパイラエラー箇所マーク
Plug 'glidenote/memolist.vim'				" 123 memo
Plug 'mechatroner/rainbow_csv'
Plug 'mbbill/undotree'


""LSP関連
if executable('git')
	Plug 'prabirshrestha/async.vim'
	Plug 'prabirshrestha/asyncomplete.vim'
	Plug 'prabirshrestha/asyncomplete-lsp.vim'
	Plug 'prabirshrestha/vim-lsp'
	Plug 'mattn/vim-lsp-settings'
	Plug 'mattn/vim-lsp-icons'
	Plug 'hrsh7th/vim-vsnip'
	Plug 'hrsh7th/vim-vsnip-integ'
endif

if !has('nvim') || !has('python3')
	Plug 'roxma/nvim-yarp'
	Plug 'roxma/vim-hug-neovim-rpc'
	Plug 'markonm/traces.vim'				" 置換時にリアルタイム描画 nvimは標準で入っているらしい
endif
		Plug 'Shougo/neosnippet-snippets'
		Plug 'Shougo/neosnippet.vim'

Plug 'liuchengxu/vim-clap'					" Clap
	Plug 'tamago324/vim-clap-help' 			" ClapでHelp
	Plug 'hokorobi/vim-clap-sessions'

if has('nvim')
	Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
elseif has('python3')
	Plug 'Shougo/deoplete.nvim',
else
	Plug 'Shougo/vimproc.vim'
	Plug 'Shougo/denite.nvim', { 'do': ':UpdateRemotePlugins' }
	Plug 'Shougo/defx.nvim', { 'do': ':UpdateRemotePlugins' }
	"Plug 'Shougo/denite.nvim'
	"Plug 'Shougo/defx.nvim'
	"Plug 'roxma/nvim-yarp'
	"Plug 'roxma/vim-hug-neovim-rpc'
endif

" ボツプラグイン機会があれば
"Plug 'Shougo/neocomplete.vim'			" luaサポートうんぬん
"Plug 'lambdalisue/fern.vim'
"Plug 'osyo-manga/vim-anzu'					" 112 検索結果ヒット数表示shortmessで実現可能
"Plug 'deris/vim-shot-f'						" fキー強化
"Plug 'arp242/startscreen.vim'				" simple startify
"Plug 'thinca/vim-splash'					"joke
"Plug 'xolox/vim-session'					" session管理
"	Plug 'xolox/vim-misc'
"Plug 'itchyny/vim-cursorword'				" カーソル下の単語にアンダーライン
"Plug 'miura/ImageJMacro_Highlighter'		" ImageJシンタックス
"Plug 'liuchengxu/vista.vim'				" lightlineの設定も合わせて変更すること
"Plug 'soramugi/auto-ctags.vim'				" ctags自動化
"Plug 'cohama/lexima.vim'					" 閉じカッコを自動で　mappingが色々干渉したのでオフにする
"Plug 'puremourning/vimspector'				" debug用
"Plug 'thaerkh/vim-workspace'				" session管理用→フリーズ多発
"Plug 'kassio/neoterm'						" ターミナル拡張

call plug#end()
"}}}

"その他の設定ファイル読み込み
runtime! userautoload/*.vim

" 各種設定の読み込み
call map(sort(split(globpath(&runtimepath, '_config/*.vim'))), {->[execute('exec "so" v:val')]})
