"
" ██╗   ██╗██╗███╗   ███╗██████╗  ██████╗
" ██║   ██║██║████╗ ████║██╔══██╗██╔════╝
" ██║   ██║██║██╔████╔██║██████╔╝██║
" ╚██╗ ██╔╝██║██║╚██╔╝██║██╔══██╗██║
"  ╚████╔╝ ██║██║ ╚═╝ ██║██║  ██║╚██████╗
"   ╚═══╝  ╚═╝╚═╝     ╚═╝╚═╝  ╚═╝ ╚═════╝
" Last Change: 14-Jul-2021.
" Maintainer: TH

"set{{{
set encoding=UTF-8
scriptencoding utf-8
if !has('kaoriya')
	let g:vimproc#download_windows_dll = 1
endif
set shortmess+=I                                 " 起動時のメッセージを消す
set shortmess-=S                                 " 検索件数表示
"pythonインターフェース有効化
"anacondaで指定すると動作が超絶不安定
"pynvimのインストール方法謎
if has('nvim')
	set inccommand=split
else
	set pythonthreedll=$HOME\vimfiles\python-3.8.3-embed-amd64\python38.dll
endif
"let g:python3_host_prog = '$HOME\AppData\Local\Programs\Python\Python38\python'
"ステータスライン常時表示
set laststatus=2
set cmdheight=2
"候補が一つでも表示、勝手にインサートされない
"set completeopt=menuone,noinsert
set completeopt=menuone
"ラグ対策
set lazyredraw
set updatetime=700
set autoindent
set autoread
"set expandtab
set tabstop=4
set shiftwidth=4
"set number
"カラムのカクカク防止
set signcolumn=yes
filetype plugin on
"コマンドラインモードでTABキーによるファイル名補完を有効にする
set wildmenu wildmode=full
"自動的にセッション保存
set sessionoptions-=blank
"対になる括弧点滅
set showmatch
set matchtime=1
set scrolloff=10
set backspace=indent,eol,start
set matchpairs+=「:」,『:』,（:）,【:】,《:》,〈:〉,［:］,‘:’,“:”,｛:｝
set virtualedit=block
set ignorecase
set smartcase
set wildignore+=*.so,*.swp,*.zip,*.jpg,*.png,*.exe,*.dll
"}}}
"backup{{{
" ネストしたディレクトリを作成する関数
function! s:mkdir(dir)
    if !isdirectory(a:dir)
       " "p" を渡すことでネストしたディレクトリ全てが作成される
        call mkdir(a:dir, "p")
    endif
endfunction
let $DATE = strftime("%Y%m%d_%H%M%S")
set backup
set writebackup
set backupdir=$HOME/.vimbackup
call s:mkdir(&backupdir)
set undodir=$HOME/.vimbackup
call s:mkdir(&undodir)
set undofile
set noswapfile
"}}}
"grep代替{{{
if executable('pt')
	set grepprg=pt\ --nogroup\
	set grepformat=%f:%l:%c:%m
elseif executable('ag')
	set grepprg=ag\ --nogroup\ -iS
    set grepformat=%f:%l:%m
elseif executable('rg')
    set grepprg=rg\ --vimgrep\ --no-heading
    set grepformat=%f:%l:%c:%m,%f:%l:%m
endif
"}}}
"IME状態に応じたカーソル色設定{{{
if has('multi_byte_ime')
  highlight Cursor guifg=#000d18 guibg=#8faf9f gui=bold
  highlight CursorIM guifg=NONE guibg=#ecbcbc
endif
"}}}
"諸々のaugroup{{{
augroup win_config
	autocmd!
	"Quickfixウィンドウ開く
	autocmd QuickFixCmdPost *grep* cwindow
	"qfウィンドウを常に最下部で開く
	autocmd FileType qf wincmd J
	"ウィンドウを常に等分割
	autocmd VimResized * :wincmd =
	"session保存時クイックフィックス閉じる
	autocmd VimLeave * cclose
	autocmd VimLeave * cclose
	autocmd VimLeave	* mks! ~/.vim/session/$DATE.vim
	"文末スペース / 連続改行削除
	autocmd BufWritePre * :%s/\s\+$//ge
	autocmd BufWritePre * :%s/\n\{4,}/\r\r\r/ge
	autocmd BufWritePre * :%s#\($\n\s*\)\+\%$##ge
	"折りたたみ設定
	autocmd FileType vim setlocal foldmethod=marker
	"backupファイルに日付
	autocmd BufWritePre * let &bex = '.' .strftime("%Y%m%d_%H%M%S")
augroup END
"}}}
" 終了時に保存するセッションオプションを設定する{{{
let g:restart_sessionoptions
    \ = 'blank,buffers,curdir,folds,help,localoptions,tabpages'
"}}}
"vimrcの編集再読み込み{{{
let $MYSEQRC = expand('$HOME\vimfiles\userautoload\SysSeq.vim')
let $MYPLUGRC =expand('$VIMRUNTIME\userautoload\Plugins.vim')
let $MYCONFIG =expand('$VIMRUNTIME\_config\*.vim')
let $MYGCONFIG =expand('$VIMRUNTIME\_gconfig\*.vim')
if has('nvim')
	let $MYVIMRC =expand('$HOME\AppData\Local\nvim\init.vim')
	let $MYGVIMRC =expand('$HOME\AppData\Local\nvim\ginit.vim')
endif

"編集
command! Evimrc :e $MYVIMRC
command! Egvimrc :e $MYGVIMRC
command! Eplug :e $MYPLUGRC
command! Etoml :e $HOME\.vim\rc\dein.toml
command! Eltoml :e $HOME\.vim\rc\dein_lazy.toml
command! Esysseq :e $MYSEQRC

"保存したら再読み込み
"gui_runningがnvimでは機能しないらしい
augroup myvimrc
    autocmd!
    autocmd BufWritePost $MYVIMRC,$MYGVIMMRC,.vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc,ginit.vim,init.vim,_config/*.vim,_gconfig/*.vim
				\nested so $MYVIMRC | if has('gui_running') || has('nvim') | so $MYGVIMRC | endif
				"\nested so $MYVIMRC | if has('gui_running') || has('nvim') | so $MYGVIMRC | endif  | LightlineUpdate
    autocmd BufWritePost  /_config/*.vim,/_gconfig/*.vim
				\nested call map(sort(split(globpath(&runtimepath, '_config/*.vim'))), {->[execute('exec "so" v:val')]})
	autocmd BufWritePost $MYSEQRC nested so $MYSEQRC
augroup END
"}}}
" install vim-pulg{{{
if has('vim_starting')
  set rtp+=~/vimfiles/plugged
  if !isdirectory(expand('~/vimfiles/plugged'))
    echo 'install vim-plug...'
    call system('mkdir -p ~/vimfiles/plugged')
    call system('git clone https://github.com/junegunn/vim-plug.git ~/vimfiles/plugged/vim-plug/autoload')
  end
endif
"}}}
" auto - install plugins{{{
let s:plug = {
      \ "plugs": get(g:, 'plugs', {})
      \ }

function! s:plug.is_installed(name)
  return has_key(self.plugs, a:name) ? isdirectory(self.plugs[a:name].dir) : 0
endfunction

if s:plug.is_installed("vim-myplugin")
  " setting
endif
function! s:plug.check_installation()
  if empty(self.plugs)
    return
  endif

  let list = []
  for [name, spec] in items(self.plugs)
    if !isdirectory(spec.dir)
      call add(list, spec.uri)
    endif
  endfor

  if len(list) > 0
    let unplugged = map(list, 'substitute(v:val, "^.*github\.com/\\(.*/.*\\)\.git$", "\\1", "g")')

    " Ask whether installing plugs like NeoBundle
    echomsg 'Not installed plugs: ' . string(unplugged)
    if confirm('Install plugs now?', "yes\nNo", 2) == 1
      PlugInstall
      " Close window for vim-plug
      silent! close
      " Restart vim
      silent! !vim
      quit!
    endif

  endif
endfunction

augroup check-plug
  autocmd!
  autocmd VimEnter * if !argc() | call s:plug.check_installation() | endif
augroup END
"}}}
" auto - update per week{{{
function! OnVimEnter() abort
  " Run PlugUpdate every week automatically when entering Vim.
  if exists('g:plug_home')
    let l:filename = printf('%s/.vim_plug_update', g:plug_home)
    if filereadable(l:filename) == 0
      call writefile([], l:filename)
    endif

    let l:this_week = strftime('%Y_%V')
    let l:contents = readfile(l:filename)
    if index(l:contents, l:this_week) < 0
      call execute('PlugUpdate')
      call writefile([l:this_week], l:filename, 'a')
    endif
  endif
endfunction

autocmd VimEnter * call OnVimEnter()
"}}}
" プラグインインストール{{{
silent! call plug#begin('~/vimfiles/plugged')
" 起動時読込
Plug 'ryanoasis/vim-devicons'						" icon追加 最後に読み込む事

" fuzzyfinder{{{
"" lazy load timer
Plug 'liuchengxu/vim-clap'							,
	Plug 'tamago324/vim-clap-help' 					,
	Plug 'hokorobi/vim-clap-sessions'				,
Plug 'scrooloose/nerdtree'							,
	Plug 'tiagofumo/vim-nerdtree-syntax-highlight' 	,
	Plug 'Xuyuanp/nerdtree-git-plugin' 				,
Plug 'ctrlpvim/ctrlp.vim'							,
	Plug 'mattn/ctrlp-matchfuzzy'					,
	Plug 'mattn/ctrlp-mark'							,
	Plug 'hara/ctrlp-colorscheme'					,

call plug#end()

"}}}
"その他の設定ファイル読み込み{{{
runtime! userautoload/*.vim
" 各種設定の読み込み
"call map(sort(split(globpath(&runtimepath, '_config/*.vim'))), {->[execute('exec "so" v:val')]})
let s:plugs = get(s:, 'plugs', get(g:, 'plugs', {}))
function! FindPlugin(name) abort
  return has_key(s:plugs, a:name) ? isdirectory(s:plugs[a:name].dir) : 0
endfunction
command! -nargs=1 UsePlugin if !FindPlugin(<args>) | finish | endif
runtime! _config/*.vim
"}}}
