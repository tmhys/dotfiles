[[plugins]]
repo = 'vim-jp/vimdoc-ja'
hook_add = '''"{{{
"}}}'''

# colorschemes{{{
[[plugins]]
repo = 'rafi/awesome-vim-colorschemes'
hook_add = '''"{{{
	augroup my_colorscheme
		autocmd!
		autocmd VimEnter * nested colorscheme ayu
	augroup END
"}}}'''
# }}}


# lightline{{{
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''"{{{
    function! s:lightline_update()
      if !exists('g:loaded_lightline')
    	    return
      endif
    	  try
       if g:colors_name =~# 'wombat\|solarized\|landscape\|jellybeans\|Tomorrow\|molokai\|tender\|papercolor\|one\|ayu'"seoul256
    	  let g:lightline.colorscheme = substitute(substitute(g:colors_name, '-', '_', 'g'), '256.*', '', '') .
              \ (g:colors_name ==# 'solarized' ? '_' . &background : '')
          call lightline#init()
          call lightline#colorscheme()
          call lightline#update()
        endif
      catch
      endtry
    endfunction
    call s:lightline_update()

    command! -bar LightlineUpdate    call lightline#init()| call lightline#colorscheme()| call lightline#update()

    let g:lightline = {
        \ 'active': {
    	\   'right': [['lineinfo'],['percent'],[ 'qfstatusline', 'fileformat','fileencoding','filetype']],
        \   'left': [ [ 'mode', 'paste' ],
        \             [ 'fugitive','dir', 'filename' ],
    	\			  ['currenttag']]
        \ },
        \ 'component_function': {
        \   'fugitive': 'LightLineFugitive',
        \   'dir': 'LightLineDir',
        \   'readonly': 'LightLineReadonly',
        \   'modified': 'LightLineModified',
        \   'filename': 'LightLineFilename',
        \   'filetype': 'LightLineFiletype',
        \   'fileformat': 'LightLineFileformat',
    	\	'currenttag': 'LightLineCurrentTag',
    	\   'percent': 'MyLightLinePercent',
    	\   'lineinfo': 'MyLightLineLineInfo'
        \ },
    	\ 'component_expand': {'qfstatusline': 'qfstatusline#Update'},
    	\ 'component_type':   {'qfstatusline': 'error'},
        \ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
    	\ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" }
        \ }

    let g:Qfstatusline#UpdateCmd = function('lightline#update')


    ""modeÁü≠Á∏ÆÂΩ¢{{{
    "let g:lightline = {
    "      \ 'mode_map': {
    "        \ 'n' : 'N',
    "        \ 'i' : 'I',
    "        \ 'R' : 'R',
    "        \ 'v' : 'V',
    "        \ 'V' : 'VL',
    "        \ "\<C-v>": 'VB',
    "        \ 'c' : 'C',
    "        \ 's' : 'S',
    "        \ 'S' : 'SL',
    "        \ "\<C-s>": 'SB',
    "        \ 't': 'T',
    "        \ },
    "      \ }
    ""      }}}

    function! LightLineModified()
        if &filetype == "help"
            return ""
        elseif &modified
            return "+"
        elseif &modifiable
            return ""
        else
            return ""
        endif
    endfunction

    function! LightLineDir()
        return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
                    \ ('' != expand('%:p:h:t') ? expand('%:p:h:t') : '') .
                    \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
    endfunction

    function! LightLineReadonly()
        if &filetype == "help"
            return ""
        elseif &readonly
            return "ÓÇ¢"
        else
            return ""
        endif
    endfunction

    function! LightLineFugitive()
        if exists("*fugitive#head")
            let _ = fugitive#head()
            return strlen(_) ? 'ÓÇ†'._ : ''
        endif
        return ''
    endfunction

    function! LightLineFilename()
        return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
    	        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
            	\  &ft == 'unite' ? unite#get_status_string() :
            	\  &ft == 'vimshell' ? vimshell#get_status_string() :
            	\ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
            	\ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
    endfunction

    function! LightLineFiletype()
      return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
    endfunction

    function! LightLineFileformat()
      return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
    endfunction

    if !empty(globpath(&rtp, 'autoload/tagbar.vim'))
    	function! LightLineCurrentTag()
    	  return tagbar#currenttag('%s', '')
    	endfunction
    endif
    if !empty(globpath(&rtp, 'autoload/vista.vim'))
    	function! LightLineCurrentTag() abort
    	  return get(b:, 'vista_nearest_method_or_function', '')
    	endfunction
    	autocmd VimEnter * call vista#RunForNearestMethodOrFunction()
    endif

    "Âè≥‰∏ä„Å´working directory
    let g:lightline.tabline = {'right': [['cd']]}
    let g:lightline.component = {'cd': '%.35(%{fnamemodify(getcwd(), ":~")}%)'}

    "NERDTree„ÅßË°®Á§∫ÁúÅÁï•
    function! MyLightLinePercent()
      if &ft !=? 'nerdtree' || &ft !=? 'tagbar'
        return line('.') * 100 / line('$') . '%'
      else
        return ''
      endif
    endfunction

    function! MyLightLineLineInfo()
      if &ft !=? 'nerdtree' || &ft !=? 'tagbar'
        return line('.').':'. col('.')
      else
        return ''
      endif
    endfunction
"}}}'''
depends  = [
    'delphinus/lightline-delphinus',
    'ryanoasis/vim-devicons'
    ]

[[plugins]]
repo = 'delphinus/lightline-delphinus'
hook_add = '''"{{{
"}}}'''
#}}}

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''"{{{
  if has('win32')
    let cmd = 'tools\\update-dll-mingw'
  elseif has('win32unix') " for Cygwin
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
"}}}'''

# lsp{{{
[[plugins]]
repo = 'prabirshrestha/vim-lsp'
# on_i = 1
hook_add = '''"{{{
    function! s:on_lsp_buffer_enabled() abort
    	setlocal omnifunc=lsp#complete
    	setlocal signcolumn=yes
    	nmap <buffer> gd <plug>(lsp-definition)
    	nmap <buffer> <f2> <plug>(lsp-rename)
    	nnoremap <buffer> <F5> :LspDocumentFormat<CR>
    	autocmd BufWritePre *.py LspDocumentFormatSync
    	"inoremap <expr> <cr> pumvisible() ? "\<c-y>\<cr>" : "\<cr>"
    endfunction

    augroup lsp_install
      au!
      autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
    augroup END
    command! LspDebug let lsp_log_verbose=1 | let lsp_log_file = expand('~/lsp.log')

    let g:lsp_diagnostics_enabled = 1
    let g:lsp_diagnostics_echo_cursor = 1
    let g:asyncomplete_auto_popup = 2
    let g:asyncomplete_auto_completeopt = 1
    let g:asyncomplete_popup_delay = 1
    let g:lsp_text_edit_enabled = 0

    inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
    inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
    inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"

    "let g:lsp_signs_error = {'text': '‚ùå'}
    let g:lsp_signs_error = {'text': 'Ôôô'}
    "let g:lsp_signs_warning = {'text': '‚ö†Ô∏è', 'icon': '/path/to/some/icon'}
    let g:lsp_signs_warning = {'text': 'Ôî©', 'icon': '/path/to/some/icon'}
    "let g:lsp_signs_hint = {'icon': '/path/to/some/other/icon'}
    "let g:lsp_signs_hint = {'text': 'üí°'}
    let g:lsp_signs_hint = {'text': 'Ô†µ'}
    "let g:lsp_diagnostics_signs_error            = {'text': '‚ùå'}
    "let g:lsp_diagnostics_signs_warning          = {'text': '‚ö†Ô∏è'}
    "let g:lsp_diagnostics_signs_information      = {'text': '‚ùì'}
    "let g:lsp_diagnostics_signs_hint             = {'text': 'üí°'}
    let g:lsp_diagnostics_signs_error            = {'text': 'Ôôô'}
    let g:lsp_diagnostics_signs_warning          = {'text': 'Ôî©'}
    let g:lsp_diagnostics_signs_information      = {'text': 'Ôëâ'}
    let g:lsp_diagnostics_signs_hint             = {'text': 'Ô†µ'}
"}}}'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'
# on_i = 1
hook_add = '''"{{{
"}}}'''

[[plugins]]
repo = 'mattn/vim-lsp-icons'
# on_i = 1
hook_add = '''"{{{
"}}}'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
# on_i = 1
hook_add = '''"{{{
"}}}'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'
# on_i = 1
hook_add = '''"{{{
"}}}'''
# }}}
[[plugins]]
repo = 'ryanoasis/vim-devicons'
# on_source = ['lightline.vim']
hook_add = '''"{{{
"}}}'''
